\chapter{Аналитический раздел}
\label{cha:analysis}

\section{Цель разработки и основные решаемые задачи}

Цель настоящей работы – разработать метод сжатия видео на основе кратномасштабного анализа. 
Задачи настоящей работы:        

\begin{itemize}
\item провести анализ существующих методов сжатия видео,
\item разработать метод сжатия видео на основе кратномасштабного анализа,
\item создать приложение, позволяющее применять разработанный метод к видео,
\item разработать модель для оценки предложенного метода,
\item провести исследование работы метода.
\end{itemize}

\section{Анализ алгоритмов сжатия видео}

\subsection{Характеристики видео}

Видео (от лат. video — смотрю, вижу) — электронная технология формирования, записи, 
обработки, передачи, хранения и воспроизведения сигналов изображения.

Цифровое видео — множество технологий записи, обработки, передачи, 
хранения и воспроизведения визуального или аудиовизуального материала в цифровом представлении. Основное 
отличие от аналогового видео в том, что видеосигналы кодируются и передаются 
в виде последовательности бит. Цифровое видео может распространяться на 
различных видеоносителях, посредством цифровых видеоинтерфейсов в виде потока или файлов.

Этот тип данных имеет следующие характеристики:
\begin{itemize}
\item Разрешающая способность.
Любой цифровой видеосигнал характеризуется разрешением (англ. resolution), 
горизонтальным и вертикальным, измеряемым в пикселях. Разрешение обозначается двумя числами, где
первым числом обозначается количество точек в строке (горизонтальное разрешение), 
а вторым числом количество активных строк, участвующих в построении изображения 
(вертикальное разрешение). 

\item Количество цветов и цветовое разрешение.
Количество цветов и цветовое разрешение видеозаписи описывается цветовыми моделями. 
Для различных стандартов применяются различные цветовые модели: YUV, YDbDr, YIQ, RGB (и ARGB), HSV, CMYK. 
Человеческий глаз может воспринять, по разным подсчётам, от 5 до 10 миллионов оттенков цветов. 
Количество цветов в видеозаписи определяется числом бит, отведённым для кодирования цвета каждого 
пикселя (англ. bits per pixel, bpp). 

\item Битрейт (ширина видеопотока или информационная скорость записи).
Ширина видеопотока или битрейт (англ. bit rate) — это количество обрабатываемых бит 
видеоинформации за секунду времени (измеряется «бит/с» — бит в секунду или, чаще, «Мб/с» — 
мегабит в секунду; в английском обозначении bit/s и Mbit/s соответственно). 
Чем выше ширина видеопотока, тем, как правило, лучше качество видео. 
Различают два вида управления шириной потока в видеокодеке — постоянный битрейт 
(англ. constant bit rate, CBR) и переменный битрейт (англ. variable bit rate, VBR). 
Концепция VBR разработана для максимального сохранения качества видео, 
уменьшая при этом суммарный объём передаваемого видеопотока. 
При этом на быстрых сценах движения, ширина видеопотока возрастает, 
а на медленных сценах, где картинка меняется медленно, ширина потока падает. 
Это удобно для буферизованных видеотрансляций и передачи сохранённого видеоматериала 
по компьютерным сетям. Но для безбуферных систем реального времени и для прямого эфира 
(например, для телеконференций) это не подходит — в этих случаях необходимо 
использовать постоянную скорость видеопотока.

\item Качество видео.
Качество видеозаписи измеряется с помощью формальных метрик, таких как PSNR или SSIM, 
или с использованием субъективного сравнения с привлечением экспертов.

Качество видео может быть оценено субъективно по следующей методике:

\begin{enumerate}
\item выбираются видеопоследовательности для использования в тесте
\item выбираются параметры системы измерения
\item выбирается метод показа видео и подсчета результатов измерения
\item приглашается необходимое число экспертов (обычно не меньше 15)
\item проводится сам тест
\item подсчитывается средняя оценка на основе оценок экспертов.
\end{enumerate}

\end{itemize}

\subsection{Сжатие видео}

Сжатие видео (англ. Video compression) — технология компрессии цифрового видео, 
позволяющая сократить количество данных, используемых для представления видеопотока. 
Сжатие видео позволяет эффективно уменьшать поток, необходимый для передачи 
видео по каналам связи, уменьшать пространство, необходимое для хранения данных на носителе. 

Скорости передачи данных в сетях, а также емкости жестких дисков,
флэш-памяти и оптических накопителей постоянно растут. Не смотря на
снижение цены передачи и хранения бита информации, видеосжатие и его улучшение является необходимым.
Видеосжатие имеет важные преимущества. Во-первых, оно дает возможность
использовать цифровое видео в среде передачи и хранения видеоконтента,
которая не поддерживает несжатое видео. Например, пропускная
способность современного Интернета недостаточна для обращения с несжатым
видео в реальном масштабе времени даже при низкой частоте кадра и малом его
размере. Цифровой многослойный видеодиск DVD может вместить всего
несколько секунд несжатого видео с разрешением и частотой кадров,
обеспечивающими обычное телевизионное качество, поэтому использование
DVD было бы абсолютно непрактичным без применения аудио и видеосжатия.
Во-вторых, видеосжатие делает более эффективным использование ресурсов
при передаче и хранении видеоданных. Если доступен высокоскоростной
канал, то более привлекательным представляется решение, позволяющее
передавать сжатое видео высокого разрешения вместо несжатого видео
низкого разрешения. Несмотря на постоянный рост емкости устройств
хранения информации и пропускной способности каналов передачи данных,
представляется весьма вероятным, что сжатие видео остается
существенным компонентом мультимедийных сервисов.

Сигнал, несущий определенную информацию, можно сжать путем
удаления из него имеющейся избыточности. Избыточность – это компоненты
данных, без которых можно обойтись для верного отображения исходной 
информации. Многие типы данных содержат в себе статистическую
избыточность. Такие данные могут быть эффективно сжаты с использованием
алгоритмов сжатия без потерь. Сжатие без потерь применительно к
видео не является эффективным. Поэтому для достижения
высокой эффективности сжатия применяется сжатие с потерями. При
сжатии видео с потерями используется несколько типов избыточности:
\begin{itemize}
\item когерентность областей изображения - малое изменение цвета изображения
в соседних пикселях (свойство, которое используется в алгоритмах
сжатия изображений с потерями),
\item избыточность в цветовых плоскостях - используется важность
яркости изображения для восприятия,
\item подобие между кадрами - использование того факта, что на скорости 25
кадров в секунду, как правило, соседние кадры изменяются незначительно.
\end{itemize}

Использование подобия между кадрами в самом простом и наиболее
часто используемом случае означает кодирование не самого нового кадра, а его
разности с предыдущим кадром. Для видео, на котором нет большого количетсва движения (передача
новостей, видеотелефоны, съемка с камер наблюдения) большая часть кадра остается неизменной, и
такой метод позволяет значительно уменьшить поток данных. Более
сложный метод заключается в нахождении для каждого блока в сжимаемом
кадре наименее отличающегося от него блока в кадре, используемом в качестве
базового. Далее кодируется разница между этими блоками. Этот метод
существенно более ресурсоемкий.

При сравнении алгоритмов сжатия видео необходимо учитывать следующие особенности видео:

\begin{itemize}
\item Качество различных кадров одного и того же видео после обработки одним алгоритмом отличается.
Это связано с несколькими факторами. Качество может меняться в зависимости от стратегии управления битрейтом. 
Пользователь выбирает разные стратегии битрейта, и в случае выбора постоянного битрейта
на медленных сценах качество будет высоким, а на быстрых - низким. У кодеков есть так называемые 
ключевые кадры, качество которых обычно изменяется отдельно, и отличается от качества остальных кадров. 
На качество влияет префильтрация. Это означает, что на любом достаточно длинном видео можно подобрать 
как достаточно хорошие, так и достаточно плохие кадры. 

\item Алгоритмы сжатия видео создаются для различных типов видео.
Один и тот же алгоритм при различных параметрах, но одинаковом формате сжатия может по-разному сжимать различные видео, отличающиеся, например, наличием большого 
количества движения. Это означает, что для двух различных алгоритмов примерно равного качества можно подобрать видео, на которых первый будет заметно лучше второго и наоборот.

\item Качество сжатия видео зависит от параметров кодирования. 
У алгоритмов есть достаточно много параметров, позволяющих при том же размере файла заметно изменить качество. Это параметры стратегии битрейта, префильтрации, управления частотой ключевых кадров, управление зависимости префильтра от видео и другие. Это означает, что для одного и того же видео и при использовании одного алгоритма при указании различных параметров размер файла может быть одинаковым, но сильно отличаться по качеству.

\end{itemize}

В настоящее время существуют следующие алгоритмы сжатия видео:
\begin{itemize}
\item сжатие без потерь

При декомпрессии результат в точности соответствует оригиналу. При сжатии без потерь 
невозможно получить высокие коэффициены сжатия. По этой причине практически всё
широко используемое видео является сжатым с потерями. Краткое сравнение алгоритмов сжатия видео без потерь представлено в таблице \ref{tab:t1}.

\begin{enumerate}
\item HuffYUV

Каждый кадр сжимается отдельно при помощи алгоритма Хаффмана. 
Если часть кадра постоянно занимает однородный фон, то потребуется меньший поток данных, 
например для записей широкоэкранных кинофильмов (с чёрными полосами сверху и снизу изображения). 

\item CorePNG

Каждый кадр видео сжимается с использованием алгоритма сжатия PNG, позволяя 
использовать все возможности PNG формата, но также наследуя все его недостатки.
CorePNG поддерживает кодирование видео в цветовом пространстве RGB с глубиной 
цвета 24 или 32 бит. 32-битная глубина позволяет использовать необязательный 
альфа-канал. Поддержка других цветовых пространств, таких как YUY2 или YV12, также предоставляется.
CorePNG поддерживает запись P-кадров, называемых delta кадрами, в видеопотоке они 
кодируют только различия между предыдущим и текущим кадрами. 

\item Lagarith

Базируется на Huffyuv, примерно сравним с ним по быстродействию, превосходит по степени сжатия. 
Хорошо сжимает видео с преобладанием статических изображений. Это достигается 
за счёт поддержки недействительных фреймов, то есть если предшествующий фрейм 
идентичен текущему, то он используется снова, а текущий отвергается.
Lagarith работает в цветовых пространствах RGB24, RGB32, RGBA, YUY2 и YV12.
Последние версии поддерживают многопроцессорность. 
Каждый кадр может быть отдельно декодирован, это облегчает поиск, вырезание, объединение.

\item Motion JPEG 2000 

Это система кодирования видеоизображения с применением внутрикадровой технологии сжатия JPEG 2000, 
разработанная институтом интегральных схем общества Фраунгофера. 
В основе лежит дискретное вейвлет-преобразование, которое, в отличие от 
дискретно-косинусного преобразования, применяемого в кодеках семейства MPEG, 
производит кодирование сразу в двух областях: и в частотной, и в пространственной. 
Это исключает необходимость разбиения изображения на блоки. Для каждого кадра 
применяется только внутрикадровое сжатие без использования межкадрового кодирования.
Отличительной особенностью является возможность масштабируемости, 
причем не только по размеру кадра, но и по качеству, 
то есть скорости видеопотока. Из-за особенностей вейвлет разложения, каждый 
кадр может содержать свои копии, уменьшенные вдвое по горизонтали и вертикали.
Возможность сжатия без потерь позволяет применять данный кодек в области медицины, 
где требуется высокая точность изображений.
Поддерживается вложенное аудио с синхронизацией с видео.
Предлагаемые сферы применения: сохранение видеороликов в цифровых камерах, 
высококачественная видеозапись и покадровое редактирование, цифровой кинематограф,
медицинские и спутниковые изображения

\end{enumerate}

\begin{table}[ht]\small
  \caption{Сравнение алгоритмов сжатия видео без потерь}
  \begin{tabular}{|p{2cm}|p{3cm}|p{4.5cm}|p{4.5cm}|}
  \hline
  Алгоритм      & Сжатие & Достоинства & Недостатки \\
  \hline
  HuffYUV  & каждый кадр, алгоритм Хаффмана & сжатие видео с наличием областей одного цвета на кадрах & не использует избыточность информации между кадрами         \\
  \hline
  CorePNG       & каждый кадр, алгоритм PNG & наличие прозрачности, возможность гамма коррекции & не использует избыточность информации между кадрами \\
  \hline
  Lagarith   & основан на Huffyuv, использует предыдущий кадр при отсутствии изменений & хорошее сжатие при отсутствии движения & не использует избыточность информации между кадрами \\
  \hline
  Motion JPEG 2000  & каждый кадр, алгоритм JPEG 2000 & задается степень сжатия, нет дробления изображения на блоки & сложность алгоритма, не использует избыточность информации между кадрами \\
  \hline
  \end{tabular}
  \label{tab:t1}
\end{table}

\item сжатие с потерями

Одна из наиболее мощных технологий, позволяющая повысить степень сжатия, — это компенсация движения. 
При любой современной системе сжатия видео последующие кадры в потоке используют похожесть областей в 
предыдущих кадрах для увеличения степени сжатия. Однако, из-за движения каких-либо 
объектов в кадре (или самой камеры) использование подобия соседних кадров было неполным. 
Технология компенсации движения позволяет находить похожие участки, даже если они сдвинуты 
относительно предыдущего кадра. Краткое сравнение алгоритмов сжатия видео с потерями представлено в таблице \ref{tab:t2}.

\begin{enumerate}
\item M-JPEG 

Каждый кадр сжимается отдельно с помощью алгоритма сжатия изображений JPEG. 
Основным преимуществом видеосжатия Motion JPEG является простота реализации, что делает 
MJPEG подходящим для реализации в устройствах с ограниченными вычислительными ресурсами. 
Однако при отсутствии межкадрового сжатия достижение заданного битрейта требует использования 
большего, чем в случае MPEG, покадрового сжатия, что приводит появлению заметных артефактов 
сжатия. Недостатками MJPEG являются более низкий коэффициент сжатия по сравнению 
с потоковыми методами сжатия, например, MPEG-4 и проявляющиеся при высоких степенях сжатия артефакты.

\item MPEG-1

Группа стандартов цифрового сжатия аудио и видео. 
Применяется для кодирования с низким разрешением и низким битрейтом, может использоваться при любом разрешении. 
Поддерживает только прогрессивную развертку. 

Перед началом кодирования происходит анализ видеоинформации, выбираются ключевые кадры, 
которые не будут изменяться при сжатии, а так же кадры, при кодировании которых часть информации 
будет удаляться. Всего выделяется три типа кадров:

Определяет формат видеопотока, который может быть представлен как три типа кадра — независимо 
сжатые кадры (I-кадры), кадры, сжатые с использованием предсказания движения в одном 
направлении (P-кадры) и кадры, сжатые с использованием предсказания движения в двух направлениях 
(B-кадры). Соответствующие группы кадров от одного I-кадра до другого образуют GOP — Group Of 
Pictures — группу кадров.

\item MPEG-2

Основан на MPEG-1. MPEG-2 поддерживает видео и в прогрессивной, и в чересстрочной развёртке.
Требует значительные ресурсы для декомпрессии. Плохое качество при малом разрешении видео.

\item MPEG-4

Разрабатывался для передачи потокового видео по каналам с низкой пропускной способностью. 
При одном и том же битрейте и определённых условиях кодирования, качество изображения фильма 
в MPEG-4 может быть сравнимо или даже лучше, чем в случае применения MPEG-1 или MPEG-2. 
Алгоритм компрессии видео аналогичен MPEG-1 и MPEG-2. При кодировании исходного изображения 
сохраняет ключевые кадры, а вместо сохранения промежуточных — прогнозирует и сохраняет лишь 
информацию об изменениях в текущем кадре по отношению к предыдущему. 
Может возникать ступенчатость при медленном цветовом переходе, появляться артефакты 
при наличии ошибочных кадров последовательности.

\item DV 

Используется для сжатия в цифровых камерах.
Технически схож с MJPEG, но не совместим с ним. Формат DV содержит дополнительные 
возможности: наложение титров, специальный способ 
синхронизации аудио и видео информации. 
В DV используются фиксированные параметры: 720x480 при 29.97 FPS (или 720x576 при 25 FPS) при скорости 25MBit/second.

\end{enumerate}

\begin{table}[ht]\small
  \caption{Сравнение алгоритмов сжатия видео с потерями}
  \begin{tabular}{|p{2cm}|p{3cm}|p{4.5cm}|p{4.5cm}|}
  \hline
  Алгоритм      & Сжатие & Достоинства & Недостатки \\
  \hline
  M-JPEG  & каждый кадр, алгоритм JPEG & простота реализации & не использует избыточность информации между кадрами, артефакты сжатия \\
  \hline
  MPEG-1       & разбивает кадры по типам, сжимает группы кадров & может использоваться при любом разрешении & поддерживает только прогрессивную развертку \\
  \hline
  MPEG-2   & схож с MPEG-1 & поддерживает видео и в прогрессивной, и в чересстрочной развёртке & требует значительные ресурсы для декомпрессии, плохое качество при малом разрешении видео \\
  \hline
  MPEG-4  & схож с MPEG-1 & улучшен по сравнению с MPEG-1 и MPEG-2 & cтупенчатость при медленном цветовом переходе, артефакты при наличии ошибочных кадров\\
  \hline
  DV  & схож с MJPEG & наложение титров, специальный способ синхронизации аудио и видео информации & специализирован для цифровых камер \\
  \hline
  \end{tabular}
  \label{tab:t2}
\end{table}


\end{itemize}

Для различных видео один и тот же метод может давать как высокую степень сжатия, так и 
увеличивать размер исходных данных. Для оценки работы метода необходимо разделить видео на классы. Так как 
графические данные разнообразны, дадим следующие параметры для классификации:

\begin{itemize}
\item битрейт (частота кадров, разрешение видео)
\item количество изменений между кадрами (движение)
\item тип видео (реальная съемка, мультипликация)
\end{itemize}

\section{Виды вейвлет-преобразований}
\subsection{Непрерывное вейвлет-преобразование}
Непрерывное вейвлет-преобразование (CWT) есть скалярное произведение сигнала $f(x)$ и базисных функций, указанных в формуле \ref{eq:cwt1}.

\begin{equation}\label{eq:cwt1}
\psi_{a,b}(x)=a^{-1/2}\psi\Bigl(\frac{x-b}{a}\Bigr), a \in R^{+}, b \in R
\end{equation}

Таким образом, непрерывное вейвлет-преобразование может быть расчитано по формуле \ref{eq:cwt}.

\begin{equation}\label{eq:cwt}
CWT_{f}(a,b)=a^{-1/2}\int_{-\infty}^{+\infty}\psi\Bigl(\frac{x-b}{a}\Bigr)f(x)d(x)
\end{equation}

Базисные функции $\psi_{a,b}$ являются вещественными и колеблются вокруг оси абсцисс. 
Они определены на некотором интервале. Данные функции называются вейвлетами
(короткие волны) и могут рассматриваться как масштабированные и сдвинутые версии функции прототипа $\psi(x)$. 
Параметр $b$ показывает расположение во времени, а $a$ - параметр масштаба. Большие значения $a$ соответствуют низким частотам, малые – высоким.

Для того чтобы было возможно обратное получение $f(x)$ из результата CWT, функция $\psi(x)$ должна 
удовлетворять условию \ref{eq:cwt2}, где через $\Psi(\omega)$ обозначено преобразование Фурье $\psi(x)$.

\begin{equation}\label{eq:cwt2}
C_{\psi} = \int_{0}^{\infty}\frac{|\Psi(\omega)|^2}{\omega}d\omega < \infty
\end{equation}

Если $\psi(x)$ – локальная функция, то из \ref{eq:cwt2} следует, что ее среднее значение равно нулю: $\int_{-\infty}^{\infty}\psi(x)dx=0$.
Тогда формула реконструкции имеет вид \ref{eq:cwt3}
\begin{equation}\label{eq:cwt3}
f(x) = \frac{1}{C_{\psi}} \int_{-\infty}^{\infty} \int_{0}^{\infty} CWT_{f}(a, b)a^{-1/2}\psi\Bigl(\frac{x-b}{a}\Bigr)\frac{dadb}{a^2}
\end{equation}
В большинстве приложений сигнал, в том числе изображение, является дискретным. 
Поэтому вместо непрерывного вейвлет-преобразования используется дискретное вейвлет-преобразование \cite{Pup04}.

\subsection{Дискретное вейвлет-преобразование}
Под кратномасштабным анализом понимается описание пространства $L^2(R)$ через иерархически вложенные 
подпространства $V_{m}$, которые не пересекаются и дают в пределе $L^2(R)$, то есть $\cap_{m \in Z}V_{m}=\{0\}, \overline{\cup_{m \in Z}} = L^{2}(R)$.
Эти пространства имеют следующие свойства. Для любой функции $f(x) \in V_{m}$ ее сжатая версия будет принадлежать пространству $V_{m-1}$,
$f(x) \in V_{m} \Leftrightarrow f(2x) \in V_{m-1}$.
Существует такая функция $\phi(x) \in V_{0}$, что ее сдвиги $\phi_{0,n}(x) = \phi(x-n), n \in Z$ образуют ортонормированный базис пространства $V_{0}$. 
Так как функции $\phi_{0,n}(x)$ образуют ортонормированный базис пространства $V_{0}$, то функции $\phi_{m,n}(x) = 2^{-m/2} \phi(2^{-m}x-n)$
образуют ортонормированный базис пространства $V_{m}$. Эти базисные функции называются масштабирующими, 
так как они создают масштабированные версии функций в $L^{2}(R)$.
Пусть имеется некоторая непрерывная функция $f_{0}(x)$. Дискретный сигнал $c_{n}$ может быть представлен 
как последовательность коэффициентов при масштабирующих функциях, по которым раскладывается $f_{0}(x)$: $f_{0}(x)=\sum_{n}c_{0,n}\phi_{0,n}(x)$,
где $c_{0,n}=c_{n}$. Сигнал интерпретируется как последовательность коэффициентов разложения, 
полученная в ходе кратномасштабного анализа функции $f_{0}(x)$. Функция $f_{0}(x)$ декомпозируется: 
$f_{0}(x)=f_{1}(x)+e_{1}(x)=\sum_{k}c_{1,k}\phi_{1,k}(x)+\sum_{k}d_{1,k}\psi_{1,k}(x)$.
Таким образом, получили две новые последовательности $c_{1,n}$ и $d_{1,n}$. Этот процесс может быть продолжен по $f_{1}(x)$. 
Функция $f_{0}(x)$ будет представлена совокупностью коэффициентов $d_{m,n}, m \in Z^{+}, n \in Z$.
Вычисление коэффициентов $c_{j,k}$ и $d_{j,k}$ и возможно итеративно без использования функций $\phi(x)$ и $\psi(x)$. 
Для произвольного $j$:
\begin{equation}\label{eq:cwt11}
c_{j,k}=2_{1/2}\sum_{n}c{j-1,n}h_{n+2k}
\end{equation}
\begin{equation}\label{eq:cwt12}
d_{j,k}=2_{1/2}\sum_{n}c{j-1,n}g_{n+2k}.
\end{equation}

Таким образом, процесс декомпозиции полностью дискретный. Последовательности $h_{n}$ и $g_{n}$ называются фильтрами. На фильтры налагаются ограничения:
$2\sum_{n}(h_{n+2k}h_{p+2k}+g_{n+2k}g_{p+2k})=\delta_{n,p}$, $2\sum_{n}h_{n+2k}h_{n+2p} = 2\sum_{n}g_{n+2k}g_{n+2p}=\delta_{k,p}$, $2\sum_{n}h_{n+2k}h_{n+2p} = 0$ \cite{Pup04}.

Цель сжатия - выразить исходный набор данных через меньший набор данных с потерей информации либо без потери.
Имеем функцию $f(x)$, выраженную через взвешенную сумму базисных функций $u_{1}(x),...,u_{m}(x)$: $f(x)=\sum_{i=1}^{m}c_{i}u_{i}(x)$.
Набор данных в этом случае состоит из коэффициентов $c{1},...,c_{m}$. Необходимо найти функцию, аппроксимирующую $f(x)$, с меньшим 
числом коэффициентов. При данной, установливаемой пользователем, допустимой погрешности $\varepsilon$ (в случае сжатия без потерь $\varepsilon = 0$) 
требуется функция $\hat{f}(x)= \sum_{i=1}^{\hat{m}}\hat{c_{i}}\hat{u_{i}}(x)$ такая, что $\hat{m}<m$ и $\|f(x)-\hat{f}(x)\|\le\varepsilon$ в некоторой норме.
Под сжатием понимается задача уменьшения числа коэффициентов, необходимых для функции. 
Необходимо упорядочить коэффициенты $c_{1},...,c_{m}$ так, чтобы для каждого $\hat{m}<m$ первые $\hat{m}$ элементов последовательности давали
наилучшее приближение $\hat{f}(x)$ к $f(x)$ в $L^{2}$-норме. Решение этой задачи является прямым, если базис ортонормированный. 

Пусть $\pi(i)$ - это перестановка $1,...,m$, а $\hat{f}(x)$ - функция, использующая коэффициенты, соответствующие первым $\hat{m}$ членам перестановки $\pi(i)$, 
тогда $\hat{f}(x) = \sum_{i=1}^{\hat{m}}c_{\pi(i)}u_{\pi(i)}$. 

Квадрат $L^{2}$-погрешности в этом приближении определяется как 

\begin{equation}
\begin{split}
 \|f(x)-\hat{f}(x)\|_{2}^{2}=\langle f(x)-\hat{f}(x)|f(x)-\hat{f}(x)\rangle= \\
 \langle \sum_{i=\hat{m}+1}^{m}c_{\pi(i)}u_{\pi(i)} | \sum_{j=\hat{m}+1}^{m}c_{\pi(j)}u_{\pi(j)} \rangle= \\
 \sum_{i=\hat{m}+1}^{m} \sum_{j=\hat{m}+1}^{m} c_{\pi(i)} c_{\pi(j)} \langle u_{\pi(i)} | u_{\pi(j)} \rangle= \\
 \sum_{i=\hat{m}+1}^{m}(c_{\pi(i)})^{2} 
\end{split}
\end{equation}

Последний шаг обуславливается допущением, что базис является ортонормированным, значит 
$\langle u_{i}|u_{j} \rangle = \delta_{ij}$. Таким образом, квадрат общей $L^{2}$-ошибки равен сумме квадратов
всех тех коэффициентов, которые будут выбраны для децимации. Для того, чтобы минимизировать погрешность для
любого данного $\hat{m}$, необходимо выбрать такую перестановку $\pi(i)$, которая располагает коэффициенты в 
порядке уменьшения их величины: то есть $\pi(i)$ удовлетворяет $|c_{\pi l}| \ge ... \ge |c_{\pi m}|$.
На рисунке \ref{fig:dec} показано, как можно преобразовать одномерную функцию в коэффициенты с использованием функции
нормированного базиса Хаара. $L^{2}$ сжатие к полученным коэффициентам применяется простым удалением или игнорированием
коэффициентов с самыми маленькими величинами. Варьирование степени сжатия дает последовательность приближений к исходной функции \cite{Pup10}.
Расчитанные коэффициенты для вейвлетов Добеши представлены в приложении \ref{cha:koef}. Для вейвлетного преобразования была выбрана система 
из четырех коэффициентов \cite{Pup12}.

\begin{figure}[ht]
  \centering
  \includegraphics[scale=0.4]{inc/graphics/dec.png}
  \caption{Преобразование одномерной функции в коэффициенты с использованием функции нормированного базиса Хаара}
  \label{fig:dec}
\end{figure}

\subsection{Матричное представление DWT}
Пусть $v_{j}$ – последовательность конечной длины $c_{j,n}$ для некоторого $J$. Этот вектор преобразуется в вектор $v_{j+1}$, содержащий последовательности $c_{j+1,n}$ 
и $d_{j,n}$, каждая из которой половинной длины. Преобразование может быть записано в виде матричного умножения $v_{j+1} = M_{j}v^{j}$, где матрица $M_{j}$ – 
квадратная и состоит из нулей и элементов $h_{n}$, является ортонормированной, и обратная ей матрица является транспонированной.
В формулах \ref{eq:dwt1} и \ref{eq:dwt2} представлен пример прямого и обратного преобразования для фильтра длиной $L=4$, последовательности длиной $N=8$, начального значения $j=0$.
\begin{equation}\label{eq:dwt1}
\begin{bmatrix} 
c_{10} \\ c_{11} \\c_{12} \\c_{13} \\d_{10} \\d_{11} \\d_{12} \\d_{13} \\
\end{bmatrix}
=
\sqrt{2}
\begin{bmatrix} 
h_{0} & h_{1} & h_{2} & h_{3} &       &       &       &       \\ 
      &       & h_{0} & h_{1} & h_{2} & h_{3} &       &       \\ 
      &       &       &       & h_{0} & h_{1} & h_{2} & h_{3} \\
h_{2} & h_{3} &       &       &       &       & h_{0} & h_{1} \\
h_{3} &-h_{2} & h_{1} &-h_{0} &       &       &       &       \\ 
      &       & h_{3} &-h_{2} & h_{1} &-h_{0} &       &       \\ 
      &       &       &       & h_{3} &-h_{2} & h_{1} &-h_{0} \\
h_{1} & h_{0} &       &       &       &       & h_{3} &-h_{2} 
\end{bmatrix}
\begin{bmatrix} 
c_{00} \\ c_{01} \\c_{02} \\c_{03} \\c_{04} \\c_{05} \\c_{06} \\c_{07} \\
\end{bmatrix}
\end{equation}

Выражения \ref{eq:cwt11} и \ref{eq:cwt12} – это один шаг DWT. Полное DWT заключается в итеративном умножении верхней половины вектора $v^{j+1}$ 
на квадратную матрицу $M_{j+1}$, размер которой $2^{d-j}$. Эта процедура может повторяться $d$ раз, пока длина вектора не станет равна единице \cite{Pup04}. 

\begin{equation}\label{eq:dwt2}
\begin{bmatrix} 
c_{00} \\ c_{01} \\c_{02} \\c_{03} \\c_{04} \\c_{05} \\c_{06} \\c_{07} \\
\end{bmatrix}
=
\sqrt{2}
\begin{bmatrix} 

h_{0} &       &       & h_{2} & h_{3} &       &       & h_{1} \\
h_{1} &       &       & h_{3} &-h_{2} &       &       &-h_{0} \\
h_{2} & h_{0} &       &       & h_{1} & h_{3} &       &       \\
h_{3} & h_{1} &       &       &-h_{0} &-h_{2} &       &       \\
      & h_{2} & h_{0} &       &       & h_{1} & h_{3} &       \\
      & h_{3} & h_{1} &       &       &-h_{0} &-h_{2} &       \\
      &       & h_{2} & h_{0} &       &       & h_{1} & h_{3} \\
      &       & h_{3} & h_{1} &       &       &-h_{0} &-h_{2} 

\end{bmatrix}
\begin{bmatrix} 
c_{10} \\ c_{11} \\c_{12} \\c_{13} \\d_{10} \\d_{11} \\d_{12} \\d_{13} \\
\end{bmatrix}
\end{equation}


\subsection{Построение фильтров Добеши}
В настоящее время разработаны различные вейвлет-функции, ориентированные для решения различных задач. 
В данной работе для рассмотрения выбраны вейвлеты Добеши, так как предполагается, что увеличение числа 
ненулевых моментов для $Psi$ приводит к лучшей сжимаемости \cite{Pup01}. Добеши были сконструированы ортонормированные вейвлеты с компактными носителями на бесконечной вещественной оси.

Для построения фильтров Добеши процесс декомпозиции может быть записан как $v^{j+1}=M_{j}v^{j}$. Из свойств M:

\begin{equation}\label{eq:dwt3}
M_{j}^{T}v^{j} M_{j} = I
\end{equation}

$I$ - единичная матрица. Рассмотрим фильтр длиной 4. Получим матрицу, аналогичную \ref{eq:dwt1}. Из равенства \ref{eq:dwt3} следует, что 
$h_{0}^{2} + h_{1}^{2} + h_{2}^{2} + h_{3}^{2} = 1/2$, $h_{0}h_{1} + h_{2}h_{3} = 1/2$.
Эта система не дает единственного решения для фильтра $h_{m}$. Если потребовать, чтобы высокочастотный фильтр имел два нулевых момента:
$h_{3} - h_{2} + h_{1} - h_{0} = 0$, $h_{3} - 2h_{2} + 3h_{1} - 4h_{0} = 0$,
тогда: $h_{0} = \frac{1+\sqrt{3}}{4\sqrt{2}}$, $h_{1} = \frac{3+\sqrt{3}}{4\sqrt{2}}$, $h_{2} = \frac{3-\sqrt{3}}{4\sqrt{2}}$, $h_{3} = \frac{1-\sqrt{3}}{4\sqrt{2}}$.
Эти коэффициенты определяют вейвлеты, называемые D4-вейвлетами Добеши. 
Все фильтры Добеши могут быть получены посредством этой процедуры. 
Для фильтра длиной $L=2N$ необходимо $N$ равенств относительно нулевых моментов для получения единственного решения. 
В общем случае решение может быть получено численно. 

В $D_{4}$-конструкции задействованы следующие последовательности:
\begin{equation}
\begin{split}
 p=a=\frac{1}{4\sqrt{2}}(1+\sqrt{3}, 3+\sqrt{3}, 3-\sqrt{3}, 1-\sqrt{3}), \\
 q=b=\frac{1}{4\sqrt{2}}(1-\sqrt{3}, -3+\sqrt{3}, 3+\sqrt{3}, -1-\sqrt{3})
 \end{split}
\end{equation}

Последовательность $p$ представляет ненулевые элементы каждого столбца $P^{j}$, тогда как последовательность $q$ содержит ненулевые 
элементы столбца $Q^{j}$. Аналогично, последовательности $a$ и $b$ представляют строки $A^{j}$ и $B^{j}$ соответственно.
Последовательность для вейвлет фильтра можно получить, если поменять порядок элементов в последовательности масштабирующих функций 
и изменить их знаки на противоположные. Такие последовательности носят название квадратурных зеркальных фильтров.

$D_{4}$-масштабирующая функция и $D_{4}$-вейвлет изображены на рисунке \ref{fig:d4}. Обе функции ассиметричны и всюду недифференцируемы,
хотя при этом они являются непрерывными. Эти базисные функции являются членами целого семейства базисов, полученных Добеши,
включающего базисы, гладкость которых возрастает с увеличением носителей базисных функций.

\begin{figure}[ht]
  \centering
% [width=0.5\textwidth] --- регулировка ширины картинки
  \includegraphics[scale=0.4]{inc/graphics/d4.png}
  \caption{Функции базиса вейвлетов Добеши: (а) $D_{4}$-масштабирующая функция; (б) $D_{4}$-вейвлет}
  \label{fig:d4}
\end{figure}

\subsection{Представление DWT для обработки двумерных и трехмерных данных}
Исходное изображение, например, один кадр из видео, может быть рассмотрено как одномерный массив, 
к которому затем применяется вейвлетное преобразование. 
В этом случае происходит перераспределение данных изображения, и не используется особенность избыточности данных изображений в двух измерениях. 
При применении вейвлетного преобразования к изображениям будем поочередно преобразовывать 
строки и столбцы исходного изображения, затем уменьшать рассматриваемую область в два раза. 
В начале рассматриваемая область соответствует всему изображению.
На рисунке \ref{fig:schema} представлена схема применения к изображению последовательности низкочастотных и высокочастотных фильтров. 
\begin{figure}[ht]
  \centering
% [width=0.5\textwidth] --- регулировка ширины картинки
  \includegraphics[scale=0.5]{inc/graphics/schema.png}
  \caption{Схема применения к изображению последовательности низкочастотных $L$ и высокочастотных $H$ фильтров. 
  На схеме $LH_{x}$ – вертикальное высокочастотное фильтрование, к которому применяется горизонтальное 
  низкочастотное фильтрование, $HL_{x}$ – вертикальное низкочастотное фильтрование, 
  к которому применяется горизонтальное высокочастотное фильтрование}
  \label{fig:schema}
\end{figure}
Обозначим высокочастотный фильтр $H$, а низкочастотный фильтр $L$. Тогда $LH_{x}$ – 
вертикальное высокочастотное фильтрование, к которому применяется горизонтальное 
низкочастотное фильтрование, $HL_{x}$ – вертикальное низкочастотное фильтрование, 
к которому применяется горизонтальное высокочастотное фильтрование \cite{Pup03}.
При обратном вейвлет-преобразовании к данным применяется та же последовательность действий в обратном порядке.

Для использования кратномасштабного анализа при обработке видео необходимо реализовать 3D-версию 
анализа и синтеза банков фильтров. В случае трехмерного преобразования вейвлет преобразование применяется к 
каждому из трех измерений. Если данные имеют размеры $N_{1} \times N_{2} \times N_{3}$, то применение вейвлет преобразования к первому измерению
дает два набора данных, каждый из которых имеет размер $N_{1} / 2 \times N_{2} \times N_{3}$. 
Применение вейвлет преобразования ко второму измерению дает четыре набора данных, 
каждый из которых имеет размер $N_{1} / 2 \times N_{2} / 2 \times N_{3}$. Применение вейвлет преобразования 
к третьему измерению дает восемь наборов данных, каждый из которых имеет размер $N_{1} / 2 \times N_{2} / 2 \times N_{3} / 2$. 
Это показано на рисунке \ref{fig:fig01}, где $X$ - исходный набор данных, $W$ - набор данных после применения вейвлет преобразования,
индекс $L$ - набор данных после применения низкочастотного фильтра, индекс $H$ - набор данных после применения высокочастотного фильтра.

\begin{figure}[ht]
  \centering
% [width=0.5\textwidth] --- регулировка ширины картинки
  \includegraphics[scale=0.75]{inc/graphics/3dwave.png}
  \caption{Схема применения к трехмерным данным последовательности низкочастотных $L$ и высокочастотных $H$ фильтров, где $X$ - исходный набор данных, $W$ - набор данных после применения вейвлет преобразования,
индекс $L$ - набор данных после применения низкочастотного фильтра, индекс $H$ - набор данных после применения высокочастотного фильтра}
  \label{fig:fig01}
\end{figure}

\section{Достоинства и недостатки вейвлет-преобразований}
\begin{itemize}
 \item Вейвлет-преобразования обладают всеми достоинствами преобразования Фурье
 \item Вейвлетные базисы могут быть хорошо локализованными как по частоте, так и по времени. 
 При выделении в сигналах разномасштабных процессов можно рассматривать выбранные масштабные уровни разложения
 \item Вейвлетные базисы имеют разнообразные базовые функции, свойства которых ориентированы на решение различных задач
 \item Недостатком вейвлет-преобразований является их относительная сложность
\end{itemize}

\section{Метрики оценки качества видео}

Наиболее часто используемые сравнительные оценки качества двух изображений – 
это среднеквадратическая ошибка и пиковое отношение сигнал-шум. 
Методы, основанные на этих оценках, хороши для изображений, имеющих 
белый шум. Однако эти меры некорректно отражают структурные искажения при 
кодировании (сжатии), а также плохо коррелируют с визуальной оценкой 
качества. 

Важнейшими характеристиками при сравнении различных методов
кодирования видео сигналов является выходной битрейт и оценки качества
восстановленного после декодирования видео потока. 
Одним из простых критерием оценки потери качества является
среднеквадратическое отклонение значений пикселей сжатого изображения от
оригинала.
По этому критерию изображение будет сильно испорчено при изменении
яркости всего на 5\%. В тоже время изображение со снегом, резким изменением
цвета отдельных точек будут признаны почти не изменившимися.
Другим критерием является максимальное отклонение от оригинала.
Даная мера крайне чувствительна к биению отдельных пикселей, т.е. в
изображении может измениться только один пиксель, и данный критерий
признает изображение сильно испорченным.
На практике используемой мерой качества изображения является
критерий соотношения сигнал/шум (PSNR). Эта мера аналогична
среднеквадратическому отклонению, но пользоваться ей удобнее из-за
логарифмического масштаба шкалы.
Лучше всего потери в качестве оценивает человеческий глаз. Сжатие
изображение можно считать отличной, если на глаз невозможно отличить
оригинал от сжатого изображения. Но на практике при сжатии с потерями в
изображение всегда вносятся какие-либо искажения заметные при сравнении
оригинала и сжатого изображения.
Среди большого числа критериев оценки качества восстановленного
изображения наибольшее распространение получили среднеквадратическое
отклонение и соотношение сигнал/шум, а для визуальной оценки используется
разностное изображение.
На практике, видео изображение со значениями PSNR порядка 40-43 дБ и
выше является изображением очень высокого качества. Сжатое изображение с
уровнем PSNR свыше 43 дБ в связи с особенностями человеческого зрения
неотличимо от оригинала, с уровнем от 40 до 43 дБ показывает отличное
качество изображения, с уровнем PSNR от 35 до 40 дБ – хорошее, от 30 до 35
дБ - приемлемое качество изображения, с уровнем PSNR ниже 30 дБ –
неприемлемое качество изображения \cite{Pup02}.

\subsection{PSNR}

Метрика, которую часто используют на практике, называется мерой отношения сигнала 
к шуму (peak-to-peak signal-to-noise ratio — PSNR).

\begin{equation}\label{eq:psnr}
PSNR = 10\log_{10}\frac{MaxErr^{2}wh}{\sum_{i = 0, j = 0}^{w,h}(x_{i,j}-y_{i,j})^2}
\end{equation}

PSNR рассчитывается по формуле \ref{eq:psnr} где MaxErr - максимум модуля разности цветовой компоненты, w - ширина видео, h - высота видео. 
Данная метрика, по сути, аналогична среднеквадратичному отклонению, однако пользоваться ей несколько удобнее за счет логарифмического масштаба шкалы. 
Ей присущи те же недостатки, что и среднеквадратичному отклонению.

\subsection{MSAD}

Значением данной метрики является усреднённая абсолютная разность значений цветовых компонент 
в соответствующих точках сравниваемых изображений. 
Используется, например, для отладки кодеков или фильтров. Расчитывается по формуле \ref{eq:msad}

\begin{equation}\label{eq:msad}
d(X,Y)= \frac{\sum_{i = 1, j = 1}^{m,n}\Bigl|X_{i,j}-Y_{i,j}\Bigr|}{mn}
\end{equation}

\subsection{SSIM INDEX}

Индекс структурного сходства (от англ. SSIM - structure similarity) является одним 
из методов измерения схожести между двумя изображениями. SSIM индекс это метод 
полного сопоставления, другими словами, он проводит измерение качества на 
основе исходного изображения (не сжатого или без искажений). SSIM индекс 
является развитием традиционных методов, таких как PSNR и метод среднеквадратичной 
ошибки MSE, которые оказались несовместимы с физиологией человеческого восприятия.
Отличительной особенностью метода, помимо упомянутых ранее (MSE и PSNR), является 
то, что метод учитывает "восприятие ошибки", благодаря учёту структурного изменения 
информации. Идея заключается в том, что пиксели имеют сильную взаимосвязь, 
особенно когда они близки пространственно. Данные зависимости несут важную информацию о 
структуре объектов и о сцене в целом.
SSIM метрика рассчитана на различные размеры окна. 
Разница между двумя окнами x и y имеющими одинаковый размер $N \times N$. Расчитывается по формулам 
\ref{eq:ssim}

\begin{equation}\label{eq:ssim}
SSIM= \Bigl(  \frac{2\sigma_{x}\sigma_{y}}{\sigma_{x}^{2}+\sigma_{y}^{2}} \Bigr) 
\Bigl( \frac{2\bar{X}\bar{Y}}{ \bigl( \bar{X} \bigr) ^{2} + \bigl( \bar{Y} \bigr) ^{2} } \Bigr)
\Bigl(  \frac{\sigma_{xy}}{\sigma_{x}\sigma_{y}} \Bigr); 
\end{equation}
\begin{equation}\label{eq:ssim1}
\begin{split}
\bar{X}=\frac{1}{MN}\sum_{i=1}^{M}\sum_{j=1}^{N}x_{ij},\bar{Y}=\frac{1}{MN}\sum_{i=1}^{M}\sum_{j=1}^{N}y_{ij}; \\
\sigma_{x}^2=\frac{1}{(M-1)(N-1)}\sum_{i=1}^{M}\sum_{j=1}^{N}(x_{ij}-\bar{X})^2; \\
\sigma_{y}^2=\frac{1}{(M-1)(N-1)}\sum_{i=1}^{M}\sum_{j=1}^{N}(y_{ij}-\bar{Y})^2; \\
\sigma_{xy}=\frac{1}{(M-1)(N-1)}\sum_{i=1}^{M}\sum_{j=1}^{N}(x_{ij}-\bar{X})(y_{ij}-\bar{Y}), 
\end{split}
\end{equation}

где SSIM – значение меры сходства (качества) изображений; $X=\{x_{ij}\}$ и $Y=\{y_{ij}\}$ – 
сравниваемые изображения; $M$, $N$ – размеры изображения. Первая составляющая 
выражения \ref{eq:ssim} является коэффициентом корреляции между изображениями X и Y. 
Вторая составляющая характеризует сходство средних значений яркостей двух сравниваемых изображений. 
Третья составляющая характеризует сходство контрастов 
двух сравниваемых изображений. 

Чем выше значение меры сходства изображений, тем лучше выполнена обработка изображения. 
В общем случае мера сходства изображений рассчитывается в 
непересекающихся областях для каждого изображения отдельно. Поскольку на изоб-
ражениях сцены объекты не изменялись и не двигались, меру можно вычислять сразу 
на всем изображении. 

\section{Метод сжатия видео на основе кратномасштабного анализа}

В разрабатываемой системе необходимо выделить параметры, которые влияют на поведение системы.
Были выделены следующие параметры:
\begin{itemize}
 \item Размер блока
 \item Порядок системы коэффициентов для вейвлетного преобразования
 \item Процент сохраняемых данных
 \item Алгоритм кодирования без потерь
\end{itemize}
Эти параметры передаются как входные данные вместе с графическими данными.

Вейвлетное преобразование является эффективным, если имеется избыточность графических данных \cite{Pup11}. Для трехмерного вейвлетного преобразования, в частности,
преобразования блоков в видео, необходима избыточность в трех измерениях. Это означает что соседние пиксели на одном кадре и на смежных кадрах должны иметь одинаковое 
или близкое значение цветовых компонент. 

Для определения избыточности на видео необходимо провести предварительный анализ графических данных. На видео необходимо найти такие блоки,
где избыточность во всех трех измерениях будет максимальной. Такие блоки могут быть выделены следующим образом. На видео необходимо найти смены сцен и планов.
План - это система условного деления кинематографического пространства (то есть пространства, представленного на экране). 
Предполагается, что избыточность в данных будет присутствовать только пока последовательность кадров представляет один и тот же план. Как только происходит смена плана,
в данных между кадрами наблюдается резкая граница, которая требует дополнительной информации при кодировании.
Таким образом, во время анализа данных необходимо найти смены планов. Каждая смена означает границу определенного блока.

Для поиска границ между блоками необходимо определить способ сравнения кадров. Для этой задачи могут быть использованы метрики оценки качества видео, описанные ранее,
такие как PSNR, MSAD, SSIM INDEX.

Необходимо также определить минимальный размер блока и максимальный размер блока. Минимальный размерблока требуется для устранения большого количество блоков
малого размера, что посребует вычислительных ресурсов для их обработки.
Максимальный размер блока определяется мощностью машины, на которой производятся вычисления.

Для поиска границ между блоками будем последовательно просматривать кадры видео и вычислять разницу между соседними кадрами по одной из метрик. 
Определим некоторое пороговое значение $\sigma$, превышение этого значения при вычислении разницы между кадрами будет означать 
наличие границы между блоками. Общая схема поиска блоков на видео представлена на рисунке \ref{fig:figblocks}. 



Преобразование видео с использованием вейвлетных преобразований состоит из двух основных этапов – 
прямого преобразования и обратного преобразования, общая схема представлена на рисунке \ref{fig:figalg}. 
Последовательное применение прямого и обратного преобразований не изменяет данные.
Прямое преобразование с последующим квантованием и децимацией позволяет сжать
исходные данные. Качество видео при этом зависит от параметров кодирования.

\begin{figure}[ht]
  \centering
% [width=0.5\textwidth] --- регулировка ширины картинки
  \includegraphics[scale=0.75]{inc/graphics/alg.pdf}
  \caption{Общая схема компрессии и декомпрессии видео}
  \label{fig:figalg}
\end{figure}

Вейвлетное преобразование для данных в третьем измерении, то есть для видео по времени, требует
разбиения видео на блоки по кадрам. Это необходимо, так как видео, как правило, содержит большое число кадров. 
Это означает, что вейвлетное преобразование видео по времени потребует большое количесво вычислительных ресурсов.
После разбиения на блоки необходимо применить вейвлет преобразование к каждому блоку в трех измерениях.

После применения вейвлет преобразования к блоку будет получен блок данных, содержащий
информацию о высоких и низких частотах в блоке. Применение обратного преобразования на этом этапе
позволит получить исходный набор данных.

Далее необходимо провести децимацию данных в преобразованном блоке. 
Перед началом работы пользователем определяется процент данных, который будет удален из каждого блока.
Для проведения децимации необходимо найти все минимальные коэффициенты и обнулить их. Их количество 
должно соответствовать указанному проценту удаляемых данных.
Блок данных после децимации содержит нули и может быть закодирован. При достаточно большом количестве нулевых данных
могут использоваться специальные структуры данных для хранения разреженных данных. 
Далее необходимо сжать получившиеся данные с помощью алгоритмов сжатия без потерь. Это позволяет
максимально уменьшаеть объем памяти, занимаемый итоговым файлом на диске, однако уменьшает скорость декомпрессии. 

Для воспроизведения видео необходимо провести действия в обратном порядке. 
Сначала необходимо провести декомпрессию преобразованных данных выбранным алгоритмом сжатия без потерь.
Затем к каждому преобразованному блоку необходимо применить обратное вейвлетное преобразование. 
После чего блоки должны быть объединены в общую последовательность кадров.

\begin{figure}[ht]
  \centering
% [width=0.5\textwidth] --- регулировка ширины картинки
  \includegraphics[scale=0.75]{inc/graphics/method1.pdf}
  \caption{Схема поиска блоков на видео}
  \label{fig:figblocks}
\end{figure}

